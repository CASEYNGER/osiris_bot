from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from constants.templates import NOT_ADMIN

from db.db_work import (
    get_users, is_admin, make_admin
)

from kbs.inline_kbs import about

admin_router = Router()


@admin_router.message(Command("get_users"))
async def send_users_list(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_users.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).

    :message: —Å–æ–æ–±—â–µ–Ω–∏–µ (class Message).
    """
    users = await get_users()
    if not await is_admin(message.from_user.id):
        await message.answer(NOT_ADMIN, reply_markup=about())
        return
    if not users:
        await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.", reply_markup=about())
        return
    text = "\n".join(
        [f"- {user[0]}, @{user[1]}, {user[2]};" for user in users]
    )
    await message.answer(
        f"<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{text}",
        reply_markup=about()
        )


@admin_router.message(Command("make_admin"))
async def make_admin_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /make_admin.

    –î–µ–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).

    :message: —Å–æ–æ–±—â–µ–Ω–∏–µ (class Message).
    """
    if not await is_admin(message.from_user.id):
        await message.answer(NOT_ADMIN, reply_markup=about())
        return

    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /make_admin <user_id>")
        return

    user_id = int(args[1])
    await make_admin(user_id)
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
        reply_markup=about()
        )


@admin_router.message(Command("admin_panel"))
async def admin_panel(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_panel.

    –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –∞–¥–º–∏–Ω–æ–≤).

    :message: —Å–æ–æ–±—â–µ–Ω–∏–µ (class Message).
    """
    if not await is_admin(message.from_user.id):
        await message.answer(NOT_ADMIN, reply_markup=about())
        return

    await message.answer(
        "üîß <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/get_users - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;\n"
        "/admin_panel - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏;\n"
        "/make_admin id - —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=about()
    )
