"""–•—ç–Ω–¥–ª–µ—Ä—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)."""
from aiogram import Router, F, Bot
from aiogram.enums import ContentType
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

from constants.cnst_info import (
    WELCOME_AUTH, WELCOME_NON_AUTH, CONTACT_WITH_ADMIN,
)

from config_reader import config

from utils.check_funcs import contains_bad_words

from db.db_work import (
    register_user, is_registered
)

from kbs.all_kbs import request_contact_kb
from kbs.inline_kbs import about

start_router = Router()


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :message: —Å–æ–æ–±—â–µ–Ω–∏–µ (class Message).
    """
    user_id = message.from_user.id

    if await is_registered(user_id):
        await message.answer(
            WELCOME_NON_AUTH,
            reply_markup=about()
        )
    else:
        await message.answer(
            WELCOME_AUTH,
            reply_markup=request_contact_kb(
                user_telegram_id=message.from_user.id
            )
        )


@start_router.message(F.content_type == ContentType.CONTACT)
async def get_contact(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "None"
    full_name = message.from_user.full_name or "None"
    phone_number = message.contact.phone_number
    if message.contact.user_id == user_id:
        await register_user(user_id, username, full_name, phone_number)
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä {phone_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=about()
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. üì≤",
            reply_markup=request_contact_kb
        )


@start_router.callback_query(F.data == "contact")
async def contact_button(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Åallback_query "contact".

    –í—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞.

    :callback: –≤—ã–∑–æ–≤ (class CallbackQuery).
    """
    await callback.message.edit_text(
        CONTACT_WITH_ADMIN,
        reply_markup=about()
    )
    await callback.answer()


@start_router.message(F.text.startswith("#—Å–≤—è–∑—å "))
async def send_user_message_to_admin(message: Message, bot: Bot):
    """–†–µ–¥–∏—Ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    text = message.text.replace("#—Å–≤—è–∑—å ", "").strip()

    if not text:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ <b>—Ñ–æ—Ä–º–∞—Ç</b> –æ–±—Ä–∞—â–µ–Ω–∏—è!\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> #—Å–≤—è–∑—å <i>–ü—Ä–∏–≤–µ—Ç, —è —é–∑–µ—Ä!...</i>\n\n"
        )
        return

    if contains_bad_words(text):
        await message.answer(
            "‚ùå <b>–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.</b>\n\n"
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –º–æ–∂–µ—Ç "
            "–±—ã—Ç—å –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–º –∏ —É–Ω–∏–∂–∞—é—â–∏–º –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö "
            "–ª—é–¥–µ–π."
            )
        return

    admin_id = config.admin
    await bot.send_message(
        admin_id,
        f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}:</b>\n\n{text}"
    )
    await message.answer(
        "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.</b>\n\n"
        "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç.",
        reply_markup=about()
        )
