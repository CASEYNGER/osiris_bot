"""–•—ç–Ω–¥–ª–µ—Ä—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)."""
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery

from constants.templates import ADMIN, NOT_ADMIN

from utils.check_funcs import contains_bad_words

from db.db_work import (
    register_user, is_registered, make_admin, is_admin,
    get_users
)

from kbs.all_kbs import main_kb
from kbs.inline_kbs import (
    main_ikb, about_ikb, pages_ikb, soft_skills,
    hard_skills, portfolio_ikb
    )

from about_me import info

start_router = Router()


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :message: —Å–æ–æ–±—â–µ–Ω–∏–µ (class Message).
    """
    user_id = message.from_user.id
    username = message.from_user.username or "None"
    full_name = message.from_user.full_name

    if await is_registered(user_id):
        await message.answer(
            f"–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞, <b>{full_name}</b>! üëã\n\n"
            "–Ø <b>–û—Å–∏—Ä–∏—Å</b>, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–∏—Ä–µ "
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n\n"
            "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ. –Ø —Å–æ–±—Ä–∞–ª "
            "—Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤ —Å —Ç–æ–±–æ–π –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.\n\n"
            "–ü—Ä–æ—Å—Ç–æ <i>–≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç</i> –∏–∑ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!",
            reply_markup=main_kb(
                user_telegram_id=message.from_user.id
            )
        )
    else:
        await register_user(user_id, username, full_name)
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}! üëã\n\n"
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç –û—Å–∏—Ä–∏—Å, –∏ —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞–ª —á–∞—Å—Ç—å—é –º–æ–µ–≥–æ"
            "–º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ–≥–æ –º–∏—Ä–∞. –Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã "
            "–ø–æ–º–æ—á—å —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∏ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö "
            "–∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è.\n\n"
            "–í—Å–µ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ - —ç—Ç–æ <i>–≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç</i> –≤ –º–µ–Ω—é, –∏ —è "
            "–ø—Ä–æ–≤–µ–¥—É —Ç–µ–±—è –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!",
            reply_markup=main_kb(
                user_telegram_id=message.from_user.id
            )
        )


@start_router.message(Command("status"))
async def get_status(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status.

    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è
    –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)

    :message: —Å–æ–æ–±—â–µ–Ω–∏–µ (class Message).
    """
    user_id = message.from_user.id
    username = message.from_user.username

    if not await is_registered(user_id):
        await message.answer(
            f"‚õî {username}, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return

    await message.answer(
        f"<b>–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {message.from_user.full_name}\n\n"
        f"<b>ID:</b> {message.from_user.id}\n"
        f"<b>–ù–∏–∫–Ω–µ–π–º:</b> {username}\n"
        f"<b>–ò–º—è:</b> {message.from_user.first_name}\n"
        f"<b>–§–∞–º–∏–ª–∏—è:</b> {message.from_user.last_name}\n"
    )


@start_router.message(Command("get_users"))
async def send_users_list(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_users.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).

    :message: —Å–æ–æ–±—â–µ–Ω–∏–µ (class Message).
    """
    users = await get_users()
    if not await is_admin(message.from_user.id):
        await message.answer(NOT_ADMIN)
        return
    if not users:
        await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
        return
    text = "\n".join(
        [f"- {user[0]}, @{user[1]}, {user[2]};" for user in users]
    )
    await message.answer(f"<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{text}")


@start_router.message(Command("make_admin"))
async def make_admin_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /make_admin.

    –î–µ–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).

    :message: —Å–æ–æ–±—â–µ–Ω–∏–µ (class Message).
    """
    if not await is_admin(message.from_user.id):
        await message.answer(NOT_ADMIN)
        return

    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /make_admin <user_id>")
        return

    user_id = int(args[1])
    await make_admin(user_id)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")


@start_router.message(Command("admin_panel"))
async def admin_panel(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_panel.

    –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –∞–¥–º–∏–Ω–æ–≤).

    :message: —Å–æ–æ–±—â–µ–Ω–∏–µ (class Message).
    """
    if not await is_admin(message.from_user.id):
        await message.answer(NOT_ADMIN)
        return

    await message.answer(
        "üîß <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/status - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;\n"
        "/get_users - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;\n"
    )


@start_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def get_settings(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏".

    –í—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.

    :message: —Å–æ–æ–±—â–µ–Ω–∏–µ (class Message).
    """
    await message.answer(
        "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞, "
        "–≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ <i>(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...)</i> ...\n\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /status"
    )


@start_router.message(F.text == "–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ")
async def post_info(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ "–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ".

    –í—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏ inline_menu.

    :message: —Å–æ–æ–±—â–µ–Ω–∏–µ (class Message).
    """
    await message.answer(
        "<b>–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ</b>\n\n"
        f"<b>–§–ò–û:</b> {info[0]}\n"
        f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {info[1]}\n"
        f"<b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {info[2]}\n"
        f"<b>–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b> {info[3]}\n"
        "\nJunior backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é "
        "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ –æ–±—É—á–µ–Ω–∏—é –Ω–æ–≤—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º. "
        "–ò–º–µ—é –æ–ø—ã—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ —è–∑—ã–∫–µ Python"
        " –∏ –∑–Ω–∞–∫–æ–º —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏,"
        " —Ç–∞–∫–∏–º–∏ –∫–∞–∫ Aiogram –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"
        " –±–æ—Ç–æ–≤ –∏ Django –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. "
        "–°—Ç—Ä–µ–º–ª—é—Å—å –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é"
        " —Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏—é —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö"
        " –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\n\n"
        "–ú–æ–π –ø—É—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –Ω–æ —è —É–∂–µ —É—Å–ø–µ–ª"
        " –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–ª–∏ –º–Ω–µ –æ—Å–≤–æ–∏—Ç—å"
        " –æ—Å–Ω–æ–≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π. –Ø –æ—Ç–∫—Ä—ã—Ç –∫ –Ω–æ–≤—ã–º"
        " –≤—ã–∑–æ–≤–∞–º –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ —É—á–∏—Ç—å—Å—è, —á—Ç–æ–±—ã —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
        " –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.",
        reply_markup=about_ikb()
    )


@start_router.callback_query(F.data == "start")
async def go_home_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Åallback_query "start".

    –í—ã–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ inline-–º–µ–Ω—é.

    :callback: –≤—ã–∑–æ–≤ (class CallbackQuery).
    """
    await callback.message.edit_text(
        "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=main_ikb()
    )
    await callback.answer()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ callback "–°—Å—ã–ª–∫–∏"
@start_router.callback_query(F.data == "pages")
async def send_pages(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Åallback_query "pages".

    –í—ã–∑—ã–≤–∞–µ—Ç inline-–º–µ–Ω—é —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞
    —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏.

    :callback: –≤—ã–∑–æ–≤ (class CallbackQuery).
    """
    await callback.message.edit_text(
        "<b>–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏</b>",
        reply_markup=pages_ikb()
    )
    await callback.answer()


@start_router.callback_query(F.data == "soft_skills")
async def get_soft_skills(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Åallback_query "soft_skills".

    –í—ã–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Ñ—Ç-—Å–∫–∏–ª–ª–∞—Ö.

    :callback: –≤—ã–∑–æ–≤ (class CallbackQuery).
    """
    await callback.message.edit_text(
        "<b>–°–æ—Ñ—Ç-—Å–∫–∏–ª–ª—ã</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å</b>\n"
        "–õ–µ–≥–∫–æ –Ω–∞—Ö–æ–∂—É –æ–±—â–∏–π —è–∑—ã–∫ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏ –ª—é–¥—å–º–∏, "
        "—É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ.\n\n"
        "<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å</b>\n"
        "–ó–Ω–∞—é —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã –∏ —Ü–µ–Ω—É –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n\n"
        "<b>–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å</b>\n"
        "–°—Ç—Ä–µ–º–ª—é—Å—å –∫ –∫–∞—á–µ—Å—Ç–≤—É –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞, –∏–∑—É—á–∞—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
        " –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
        "<b>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n"
        "–ë—ã—Å—Ç—Ä–æ –æ—Å–≤–∞–∏–≤–∞—é –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.\n\n"
        "<b>–ù–∞–≤—ã–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è</b>\n"
        "–£–º–µ—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è "
        "–∏ –æ–±–æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å –∏—Ö.\n\n"
        "<b>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç</b>\n"
        "–°–ø–æ—Å–æ–±–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å —ç–º–æ—Ü–∏–∏ –ª—é–¥–µ–π, —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–∏—Ö —Å —É–≤–∞–∂–µ–Ω–∏–µ–º "
        "–∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –∏—Ö, –∫–∞–∫ –≤ –∂–∏–∑–Ω–∏, —Ç–∞–∫ –∏ –≤ —Ä–∞–±–æ—Ç–µ.\n\n"
        "<b>–ì–∏–±–∫–æ—Å—Ç—å</b>\n"
        "–õ–µ–≥–∫–æ –ø—Ä–∏—Å–ø–æ—Å–∞–±–ª–∏–≤–∞—é—Å—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º, –Ω–µ –±–æ—é—Å—å –ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ.\n\n"
        "<b>–†–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤</b>\n"
        "–ù–∞—Ö–æ–∂—É –ø—É—Ç–∏ –¥–ª—è —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π, –¥–æ–±–∏–≤–∞—é—Å—å "
        "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.",
        reply_markup=soft_skills()
    )
    await callback.answer()


@start_router.callback_query(F.data == "hard_skills")
async def get_hard_skills(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Åallback_query "hard_skills".

    –í—ã–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö–∞—Ä–¥-—Å–∫–∏–ª–ª–∞—Ö.

    :callback: –≤—ã–∑–æ–≤ (class CallbackQuery).
    """
    await callback.message.edit_text(
        "<b>–•–∞—Ä–¥-—Å–∫–∏–ª–ª—ã</b>\n\n"
        "<b>–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        "- Python\n\n"
        "<b>–Ø–∑—ã–∫–∏ —Ä–∞–∑–º–µ—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        "- HTML\n- CSS\n\n"
        "<b>–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:</b>\n"
        "- Django\n- Aiogram\n- Requests\n\n"
        "<b>–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        "- SQL (PostgreSQL)\n- ORM (SQLAlchemy, SQLite)\n\n"
        "<b>API –∏ –≤–µ–±-—Å–µ—Ä–≤–∏—Å—ã:</b>\n"
        "- <i>–í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è...</i>\n\n"
        "<b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        "- PyTest, Unittest\n\n"
        "<b>–°–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π:</b>\n"
        "- Git (GitHub)\n\n"
        "<b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –∏ DevOps:</b>\n"
        "- Docker (<i>–í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è...</i>)\n"
        "- CI/CD (<i>–í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è...</i>)\n\n"
        "<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
        "- –û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö "
        "–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π, XSS, CSRF.",
        reply_markup=hard_skills()
    )
    await callback.answer()


@start_router.callback_query(F.data == "about")
async def get_about_info(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Åallback_query "about".

    –í—ã–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ.

    :callback: –≤—ã–∑–æ–≤ (class CallbackQuery).
    """
    about_text = (
        "<b>–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ</b>\n\n"
        f"<b>–§–ò–û:</b> {info[0]}\n"
        f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {info[1]}\n"
        f"<b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {info[2]}\n"
        f"<b>–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b> {info[3]}\n\n"
        "Junior backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é"
        "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ –æ–±—É—á–µ–Ω–∏—é –Ω–æ–≤—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º. "
        "–ò–º–µ—é –æ–ø—ã—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ —è–∑—ã–∫–µ Python"
        " –∏ –∑–Ω–∞–∫–æ–º —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏,"
        " —Ç–∞–∫–∏–º–∏ –∫–∞–∫ Aiogram –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"
        " –±–æ—Ç–æ–≤ –∏ Django –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. "
        "–°—Ç—Ä–µ–º–ª—é—Å—å –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é"
        " —Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏—é —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö"
        " –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\n\n"
        "–ú–æ–π –ø—É—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –Ω–æ —è —É–∂–µ —É—Å–ø–µ–ª"
        " –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–ª–∏ –º–Ω–µ –æ—Å–≤–æ–∏—Ç—å"
        " –æ—Å–Ω–æ–≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π. –Ø –æ—Ç–∫—Ä—ã—Ç –∫ –Ω–æ–≤—ã–º"
        " –≤—ã–∑–æ–≤–∞–º –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ —É—á–∏—Ç—å—Å—è, —á—Ç–æ–±—ã —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
        " –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π."
    )
    await callback.message.edit_text(
        about_text,
        reply_markup=about_ikb()
    )
    await callback.answer()


@start_router.callback_query(F.data == "portfolio")
async def post_portfolio(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Åallback_query "portfolio".

    –í—ã–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.

    :callback: –≤—ã–∑–æ–≤ (class CallbackQuery).
    """
    await callback.message.edit_text(
        "<b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ</b>\n\n"
        "<i>(–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...)</i>",
        reply_markup=portfolio_ikb()
    )


@start_router.callback_query(F.data == "contact")
async def contact_button(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Åallback_query "contact".

    –í—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞.

    :callback: –≤—ã–∑–æ–≤ (class CallbackQuery).
    """
    await callback.message.edit_text(
        "<b>–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º</b>\n\n"
        "–î–ª—è <b>–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b> –¥–∞–ª—å–Ω–µ–π—à–µ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ "
        "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b> #—Å–≤—è–∑—å <i>–ü—Ä–∏–≤–µ—Ç, —è —é–∑–µ—Ä!...</i>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ!"
    )
    await callback.answer()


@start_router.message(F.text.startswith("#—Å–≤—è–∑—å "))
async def send_user_message_to_admin(message: Message, bot: Bot):
    """–†–µ–¥–∏—Ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    user_id = message.from_user.id

    if not await is_registered(user_id):
        await message.answer(
            "‚õî –í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É."
        )

    text = message.text.replace("#—Å–≤—è–∑—å ", "").strip()

    if not text:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ <b>—Ñ–æ—Ä–º–∞—Ç</b> –æ–±—Ä–∞—â–µ–Ω–∏—è!\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> #—Å–≤—è–∑—å <i>–ü—Ä–∏–≤–µ—Ç, —è —é–∑–µ—Ä!...</i>\n\n"
        )
        return

    if contains_bad_words(text):
        await message.answer(
            "‚ùå <b>–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.</b>\n\n"
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –º–æ–∂–µ—Ç "
            "–±—ã—Ç—å –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–º –∏ —É–Ω–∏–∂–∞—é—â–∏–º –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö "
            "–ª—é–¥–µ–π."
            )
        return

    admin_id = ADMIN
    await bot.send_message(
        admin_id,
        f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}:</b>\n\n{text}"
    )
    await message.answer(
        "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.</b>\n\n"
        "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç."
        )
